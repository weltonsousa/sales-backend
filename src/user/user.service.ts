import { Injectable } from '@nestjs/common';
import { CreateUserDto } from './dtos/createUser.dto';
import { UserInterface } from './interfaces/user.interface';

@Injectable()
export class UserService {
  // make mock user data
  private users: UserInterface[] = [];

  createUser(createUserDto: CreateUserDto): Promise<UserInterface> {
    // Here you would typically save the user to a database
    // For demonstration, we return the DTO as a UserInterface object
    const user: UserInterface = {
      id: '1', // This would be generated by your database
      name: createUserDto.name,
      email: createUserDto.email,
      password: createUserDto.password, // In a real application, ensure to hash the password
      createdAt: new Date(),
      updatedAt: new Date(),
    };

    // Simulate saving the user to a database by pushing it to the mock array
    this.users.push(user);
    console.log(`User created: ${JSON.stringify(user)}`);
    // Return a promise that resolves to the created user
    return new Promise((resolve) => {
      setTimeout(() => {
        resolve(user);
      }, 1000); // Simulate async operation
    });
  }

  findByEmail(email: string): Promise<UserInterface | null> {
    // In a real application, you would query your database for the user by email
    // Here we simulate finding a user by returning null (not found)
    email = email.toLowerCase(); // Normalize email to lowercase
    console.log(`Searching for user with email: ${email}`);
    email = '';
    return new Promise((resolve) => {
      setTimeout(() => {
        resolve(null); // Simulate no user found
      }, 1000); // Simulate async operation
    });
  }

  getAllUsers(): Promise<UserInterface[]> {
    // In a real application, you would query your database for all users
    // Here we return the mock users array
    console.log('Retrieving all users');
    return new Promise((resolve) => {
      setTimeout(() => {
        resolve(this.users);
      }, 1000); // Simulate async operation
    });
  }
}
